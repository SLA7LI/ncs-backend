generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Users {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(100)
  email           String           @unique(map: "uni_users_email") @db.VarChar(255)
  password        String
  role            String           @db.VarChar(20)
  phone           String           @db.VarChar(15)
  wilaya          String           @db.VarChar(100)
  baladia         String           @db.VarChar(100)
  created_at      DateTime?
  notifications   Notification[]
  serviceRequests ServiceRequest[]
  worker          Worker?          @relation("UserToWorker")
}

model Worker {
  id                  Int                @id @default(autoincrement())
  userId              Int                @unique
  availability        Json
  rating              Float
  completedJobs       Int
  genre               String
  bio                 String?
  picture             String?
  nationalIDPicture   String?
  businessDocumentPDF String?
  verified            Boolean            @default(false)
  createdAt           DateTime           @default(now())
  lobbyParticipations LobbyParticipant[]
  user                Users              @relation("UserToWorker", fields: [userId], references: [id])
}

model ServiceRequest {
  id           Int                   @id @default(autoincrement())
  clientId     Int
  category     String                @db.VarChar(100)
  description  String
  budget       Float
  urgency      Urgency
  status       RequestStatus         @default(open)
  createdAt    DateTime              @default(now())
  latitude     Float
  longitude    Float
  participants LobbyParticipant[]
  client       Users                 @relation(fields: [clientId], references: [id])
  images       ServiceRequestImage[]

  @@index([clientId], map: "ServiceRequest_clientId_fkey")
}

model ServiceRequestImage {
  id               Int            @id @default(autoincrement())
  serviceRequestId Int
  url              String         @db.VarChar(255)
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])

  @@index([serviceRequestId])
}

model LobbyParticipant {
  serviceRequestId Int
  workerId         Int
  source           InvitationSource
  bid              Float
  status           ParticipantStatus @default(pending)
  createdAt        DateTime          @default(now())
  serviceRequest   ServiceRequest    @relation(fields: [serviceRequestId], references: [id])
  worker           Worker            @relation(fields: [workerId], references: [userId])
  clientCompleted  Boolean           @default(false)
  workerCompleted  Boolean           @default(false)

  @@id([serviceRequestId, workerId])
  @@index([workerId], map: "LobbyParticipant_workerId_fkey")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  messages  String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id])

  @@index([userId], map: "Notification_userId_fkey")
}

model escrows {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  job_id    BigInt   @db.UnsignedBigInt
  client_id BigInt   @db.UnsignedBigInt
  worker_id BigInt   @db.UnsignedBigInt
  amount    Float
  createdAt DateTime @default(now())
}

model transactions {
  id         BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt               @db.UnsignedBigInt
  escrow_id  BigInt               @db.UnsignedBigInt
  type       transactions_type
  amount     Float
  status     transactions_status? @default(pending)
  created_at DateTime?
}

enum Urgency {
  normal
  urgent
}

enum RequestStatus {
  open
  in_progress
  closed
}

enum InvitationSource {
  manual
  autoAssigned
}

enum ParticipantStatus {
  pending
  bidding
  accepted
  rejected
}

enum transactions_type {
  in
  out
}

enum transactions_status {
  pending
  success
  failed
}
