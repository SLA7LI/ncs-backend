
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  phone: 'phone',
  wilaya: 'wilaya',
  baladia: 'baladia',
  created_at: 'created_at'
};

exports.Prisma.WorkerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  availability: 'availability',
  rating: 'rating',
  completedJobs: 'completedJobs',
  genre: 'genre',
  bio: 'bio',
  picture: 'picture',
  nationalIDPicture: 'nationalIDPicture',
  businessDocumentPDF: 'businessDocumentPDF',
  verified: 'verified',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceRequestScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  category: 'category',
  description: 'description',
  budget: 'budget',
  urgency: 'urgency',
  status: 'status',
  createdAt: 'createdAt',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.ServiceRequestImageScalarFieldEnum = {
  id: 'id',
  serviceRequestId: 'serviceRequestId',
  url: 'url'
};

exports.Prisma.LobbyParticipantScalarFieldEnum = {
  serviceRequestId: 'serviceRequestId',
  workerId: 'workerId',
  source: 'source',
  bid: 'bid',
  status: 'status',
  createdAt: 'createdAt',
  clientCompleted: 'clientCompleted',
  workerCompleted: 'workerCompleted'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  messages: 'messages',
  link: 'link',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.EscrowsScalarFieldEnum = {
  id: 'id',
  job_id: 'job_id',
  client_id: 'client_id',
  worker_id: 'worker_id',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  escrow_id: 'escrow_id',
  type: 'type',
  amount: 'amount',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UsersOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  phone: 'phone',
  wilaya: 'wilaya',
  baladia: 'baladia'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.WorkerOrderByRelevanceFieldEnum = {
  genre: 'genre',
  bio: 'bio',
  picture: 'picture',
  nationalIDPicture: 'nationalIDPicture',
  businessDocumentPDF: 'businessDocumentPDF'
};

exports.Prisma.ServiceRequestOrderByRelevanceFieldEnum = {
  category: 'category',
  description: 'description'
};

exports.Prisma.ServiceRequestImageOrderByRelevanceFieldEnum = {
  url: 'url'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  messages: 'messages',
  link: 'link'
};
exports.Urgency = exports.$Enums.Urgency = {
  normal: 'normal',
  urgent: 'urgent'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  open: 'open',
  in_progress: 'in_progress',
  closed: 'closed'
};

exports.InvitationSource = exports.$Enums.InvitationSource = {
  manual: 'manual',
  autoAssigned: 'autoAssigned'
};

exports.ParticipantStatus = exports.$Enums.ParticipantStatus = {
  pending: 'pending',
  bidding: 'bidding',
  accepted: 'accepted',
  rejected: 'rejected'
};

exports.transactions_type = exports.$Enums.transactions_type = {
  in: 'in',
  out: 'out'
};

exports.transactions_status = exports.$Enums.transactions_status = {
  pending: 'pending',
  success: 'success',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Worker: 'Worker',
  ServiceRequest: 'ServiceRequest',
  ServiceRequestImage: 'ServiceRequestImage',
  LobbyParticipant: 'LobbyParticipant',
  Notification: 'Notification',
  escrows: 'escrows',
  transactions: 'transactions'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
